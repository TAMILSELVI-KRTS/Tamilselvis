The very first way of finding middle index is
mid = (start + end)/2
But there is problem with this approach, what if value of start or end or both is INT_MAX, it will cause integer overflow.
The better way of calculating mid index is :
mid = start + (end - start)/2
Let’s try these both methods in C program :/ program for calculating mid of array 
#include <stdio.h> 
#include <limits.h> 
int main() 
{ 
    int start = INT_MAX, end = INT_MAX; 
    printf("start = %dn", start); 
    printf("end = %dn", end);   
    // method 1 
    int mid1 = (start + end) / 2; 
    printf("mid using (start + end)/2 = %dn", mid1);   
    // method 2 
    int mid2 = start + (end - start) / 2; 
    printf("mid using start + (end - start)/2 = %dn", mid2); 
    return 0; 
} 
Output:

start = 2147483647
end = 2147483647
mid using (start + end)/2 = -1
mid using start + (end - start)/2 = 2147483647
Note : (end – start) may overflow if end < 0 or start < 0


ALGORITHM FOR TERNARY SEARCH:
Ternary search is a divide and conquer algorithm that can be used to find an element in an array. It is similar to binary search where we divide the array into two parts but in this algorithm, we divide the given array into three parts and determine which has the key (searched element). We can divide the array into three parts by taking mid1 and mid2 which can be calculated as shown below. Initially, l and r will be equal to 0 and n-1 respectively, where n is the length of the array. 
mid1 = l + (r-l)/3 
mid2 = r – (r-l)/3 
Note: Array needs to be sorted to perform ternary search on it.
Steps to perform Ternary Search: 
1.	First, we compare the key with the element at mid1. If found equal, we return mid1.
2.	If not, then we compare the key with the element at mid2. If found equal, we return mid2.
3.	If not, then we check whether the key is less than the element at mid1. If yes, then recur to the first part.
4.	If not, then we check whether the key is greater than the element at mid2. If yes, then recur to the third part.
5.	If not, then we recur to the second (middle) part.
